#include "gameupqt.h"
#include "gameupqt_p.h"
#include <QDebug>

/*!
   \class GameUpQt
   \inmodule GameUpQt

   \brief The GameUpQt is QML item class

   The GameUpQt class inherits QQuickItem. The class give access to
   GameUp API, which is used for maintain gamer's achievments and
   provide Leaderboard ranking for gamers
   Each game should be registered at \l {https://dashboard.gameup.io/} {GameUp dashboard} and the API key
   should be generated. The API key have to be loaded to \l {GameUpQt::} {apiKey}

   GameUp API can work in two modes: sync and async
   \l {GameUpQt::} {asyncMode} responsible for mode

*/

/*!
  \property GameUpQt::apiKey
  \inmodule GameUpQt
  \brief set GameUp API key generated at \l {https://dashboard.gameup.io/} {GameUp dashboard}
*/

/*!
    \property GameUpQt::asyncMode
    \inmodule GameUpQt
    \brief set GameUp QML Item mode

    if \l {asyncMode} set as \c true then methods will exit immedialely and all responses will be
    provided via signals
*/

GameUpQt::GameUpQt(QQuickItem *parent): QQuickItem(parent)
  , d_ptr(new GameUpQtPrivate) {
    qRegisterMetaType<GameUpQt::ServerOps>("GameUpQt::ServerOps");
    connect(d_ptr, &GameUpQtPrivate::reqComplete, this, &GameUpQt::reqComplete);
}

void GameUpQt::setApiKey(QString apiKey) {
    Q_D(GameUpQt);
    d->setApiKey(apiKey);
    emit apiKeyChanged(apiKey);
}
/*!
    \fn bool GameUpQt::ping()
    \inmodule GameUpQt

    \brief pings GameUp server

    \b {Sync mode}: Returns \c true if GameUp server accessible otherwise returns \c false.\n
    \b {Async mode}: Emits \l {pingResultChanged} where \a ok is \c true if GameUp server accessible otherwise returns \c false.
*/
bool GameUpQt::ping() {
    Q_D(GameUpQt);
    return d->ping();
}
/*!
    \fn QString GameUpQt::login(LoginType loginType, const QString &username)
    \inmodule GameUpQt

    \brief Logging in to GameUp server

    \b {Sync mode}: Returns gamer's \c token, generated by GameUp server or empty sting in case of login failure\n
    \b {Async mode}: Emits \l {loginCompleted} where \a token is gamer's \c token, generated by GameUp server or empty sting in case of login failure

*/

QString GameUpQt::login(LoginType loginType, const QString &username) {
    Q_D(GameUpQt);
    return d->login(loginType, username);
}

Gamer *GameUpQt::gamer() {
    Q_D(GameUpQt);
    return d->getGamer();
}

Leaderboard *GameUpQt::leaderboard() {
    Q_D(GameUpQt);
    return d->getLeaderboard();
}

void GameUpQt::addUserToken(const QString &username, const QString &token) {
    Q_D(GameUpQt);
    d->addUserToken(username, token);
}

void GameUpQt::updateGamerLeaderboard(const QString &username) {
    Q_D(GameUpQt);
    d->updateLeaderboard(username);
}

void GameUpQt::updateGamerAchievments(const QString &username) {
    Q_D(GameUpQt);
    d->updateGamerAchievments(username);
}

void GameUpQt::updateGamerRank(const QString &username) {
    Q_D(GameUpQt);
    d->updateGamerRank(username);
}

void GameUpQt::updateGamerData(const QString &username) {
    Q_D(GameUpQt);
    d->updateGamerData(username);
}

void GameUpQt::setLeaderboardScore(const QString &username, int score) {
    Q_D(GameUpQt);
    d->setLeaderboardScore(username, score);
}

void GameUpQt::setAsyncMode(bool asyncMode) {
    Q_D(GameUpQt);
    d->setAsyncMode(asyncMode);
    emit asyncModeChanged(asyncMode);
}
#ifdef QT_WEBVIEW_WEBENGINE_BACKEND
void GameUpQt::setWebView(QQuickWebEngineView *webView) {
#else
void GameUpQt::setWebView(QQuickWebView *webView) {
#endif
    Q_D(GameUpQt);
    d->setWebView(webView);
    emit webViewChanged();
}

void GameUpQt::reqComplete(GameUpQt::ServerOps op) {
    //qDebug() << "got op:" << op;
    Q_D(GameUpQt);
    if (op == Ping) {
        bool res = (d->getLasterror() == QNetworkReply::NoError);
        emit pingResultChanged(res);
    } else if (op == Login) {
        emit loginCompleted(d->getLastToken());
    } else if (op == LeaderboardUpdate) {
        emit gamerLeaderboardUpdated();
        emit leaderboardChanged();
    } else if (op == GamerDataUpdate) {
        emit gamerDataUpdated();
        emit gamerChanged();
    } else if (op == GamerRankUpdate) {
        emit gamerRankUpdated();
    } else if (op == GamerAchievmentsUpdate) {
        emit gamerAchievmentsUpdated();
    } else if (op == SetLeaderboardScore) {
        emit leaderboardScoreSetFinished();
    }
}

QString GameUpQt::apiKey() const {
    Q_D(const GameUpQt);
    return d->apiKey();
}

QString GameUpQt::leaderboardID() const {
    Q_D(const GameUpQt);
    return d->getLeaderboardID();
}

void GameUpQt::setLeaderboardID(QString leaderboardID) {
    Q_D(GameUpQt);
    d->setLeaderboardID(leaderboardID);
    emit leaderboardIDChanged(leaderboardID);
}

bool GameUpQt::asyncMode() const {
    Q_D(const GameUpQt);
    return d->getAsyncMode();
}

#ifdef QT_WEBVIEW_WEBENGINE_BACKEND
QQuickWebEngineView *GameUpQt::webView() const {
#else
QQuickWebView *GameUpQt::webView() const {
#endif
    Q_D(const GameUpQt);
    return d->webView();
}
